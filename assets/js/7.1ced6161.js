(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{358:function(t,s,a){t.exports=a.p+"assets/img/thirds.58c67980.png"},359:function(t,s,a){t.exports=a.p+"assets/img/header.c2309ab2.png"},375:function(t,s,a){"use strict";a.r(s);var r=a(25),v=Object(r.a)({},(function(){var t=this,s=t.$createElement,r=t._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"计算机网络"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#计算机网络"}},[t._v("#")]),t._v(" 计算机网络")]),t._v(" "),r("h3",{attrs:{id:"三次握手-四次挥手"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三次握手-四次挥手"}},[t._v("#")]),t._v(" 三次握手&四次挥手")]),t._v(" "),r("p",[r("img",{attrs:{src:a(358),alt:"1"}})]),t._v(" "),r("p",[t._v("ack=上次的syn+1")]),t._v(" "),r("p",[r("strong",[t._v("为什么不两次握手")])]),t._v(" "),r("p",[t._v("若网络拥堵阻塞会有超时重发，服务器收到重发又会建立一次连接")]),t._v(" "),r("p",[r("strong",[t._v("为什么不是3次挥手")])]),t._v(" "),r("p",[t._v("在客服端第1次挥手时，服务端可能还在发送数据。\n所以第2次挥手和第3次挥手不能合并。")]),t._v(" "),r("h3",{attrs:{id:"get和post的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#get和post的区别"}},[t._v("#")]),t._v(" get和post的区别")]),t._v(" "),r("ol",[r("li",[t._v("get把请求的数据放在url上，即HTTP协议头上，其格式为：\n以?分割URL和传输数据，参数之间以&相连。\npost把数据放在HTTP的包体内（requrest body）")]),t._v(" "),r("li",[t._v("GET产生"),r("strong",[t._v("一个TCP数据包")]),t._v("，浏览器会把http header和data一并发送出去，服务器响应200(返回数据);\nPOST产生"),r("strong",[t._v("两个TCP数据包")]),t._v("，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok(返回数据)。")]),t._v(" "),r("li",[t._v("get一般用于请求、post一般用于表单提交")])]),t._v(" "),r("h3",{attrs:{id:"url从输入到页面渲染的过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#url从输入到页面渲染的过程"}},[t._v("#")]),t._v(" url从输入到页面渲染的过程")]),t._v(" "),r("p",[t._v("大致：1.DNS解析 2.TCP连接 3.发送HTTP请求 4.服务器处理并返回HTTP报文 5.浏览器解析渲染页面")]),t._v(" "),r("ol",[r("li",[t._v("构建请求")]),t._v(" "),r("li",[t._v("查找缓存资源")]),t._v(" "),r("li",[t._v("DNS解析")]),t._v(" "),r("li",[t._v("建立TCP连接-三次握手")]),t._v(" "),r("li",[t._v("发起HTTP请求\n等待服务器返回响应报文，若是"),r("strong",[t._v("短连接")]),t._v("（HTTP1.0默认），响应后便会四次挥手关闭TCP连接，在下一次连接时重新建立HTTP连接。若是"),r("strong",[t._v("长连接")]),t._v("（HTTP1.1默认），HTTP发出得到响应后不会关闭TCP，要关闭这个连接，可以通过connection值是否为Keep-Alive来判断，若服务器想明确断开连接的话，将connection的值设为close就可以了")]),t._v(" "),r("li",[t._v("协商缓存")]),t._v(" "),r("li",[t._v("获取响应")]),t._v(" "),r("li",[t._v("渲染\n构建DOM树、样式计算、布局（分层、三维计算）、生成图层绘制列表、栅格化操作（图层分为多个图块）、合成与显示")])]),t._v(" "),r("h3",{attrs:{id:"dns查询"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dns查询"}},[t._v("#")]),t._v(" DNS查询")]),t._v(" "),r("p",[r("strong",[t._v("递归查询和迭代查询")])]),t._v(" "),r("ol",[r("li",[t._v("递归查询：本机向本地域名服务器发出一次查询请求，就静待最终的结果。如果本地域名服务器无法解析，自己会以DNS客户机的身份向其它域名服务器查询，直到得到最终的IP地址告诉本机。")]),t._v(" "),r("li",[t._v("迭代查询：本地域名服务器向根域名服务器查询，根域名服务器告诉它下一步到哪里去查询，然后它再去查，每次它都是以客户机的身份去各个服务器查询。")])]),t._v(" "),r("h3",{attrs:{id:"常见的网络攻击"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#常见的网络攻击"}},[t._v("#")]),t._v(" 常见的网络攻击")]),t._v(" "),r("p",[t._v("常见的网络攻击有：")]),t._v(" "),r("ol",[r("li",[t._v("XSS（跨站脚本攻击）\n攻击者在WEB页面中插入恶意脚本。当用户浏览页面时，促使脚本执行\n"),r("strong",[t._v("防御方式")]),t._v("：\n"),r("ol",[r("li",[t._v("客户端和服务端对用户输入的数据进行双重验证、")]),t._v(" "),r("li",[t._v("对数据进行编码、")]),t._v(" "),r("li",[t._v("设置 HTTP Header： “X-XSS-Protection: 1”")])])]),t._v(" "),r("li",[t._v("DDOS（分布式拒绝服务）\n发送大量请求，导致服务器瘫痪")]),t._v(" "),r("li",[t._v("CSRF（跨站请求伪造）\n用户本地存储cookie，攻击者利用用户的cookie进行认证，然后伪造用户发出请求"),r("strong",[t._v("或者HTTP-ONLY")]),t._v(" "),r("strong",[t._v("防御方式")]),t._v("：检查请求头是否同源")]),t._v(" "),r("li",[t._v("SQL注入\n通过操作输入来修改SQL语句来非法获取数据库中的数据\n"),r("strong",[t._v("防御方式")]),t._v("：对用户输入进行合法校验")])]),t._v(" "),r("h3",{attrs:{id:"介绍一下cookie"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#介绍一下cookie"}},[t._v("#")]),t._v(" 介绍一下cookie")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://www.cnblogs.com/qcloud1001/p/10101067.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("cookie和webstorage"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("cookie的编码方式：UrlEncode 十六进制ASCII码每两位加入"),r("code",[t._v("%")])]),t._v(" "),r("h3",{attrs:{id:"http-only"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#http-only"}},[t._v("#")]),t._v(" HTTP-ONLY")]),t._v(" "),r("p",[t._v("如果cookie中设置了HttpOnly属性，那么通过js脚本将无法读取到cookie信息，这样能有效的防止XSS攻击，窃取cookie内容，这样就增加了cookie的安全性，即便是这样，也不要将重要信息存入cookie。XSS全称Cross SiteScript，跨站脚本攻击，是Web程序中常见的漏洞，XSS属于被动式且用于客户端的攻击方式，所以容易被忽略其危害性。其原理是攻击者向有XSS漏洞的网站中输入(传入)恶意的HTML代码，当其它用户浏览该网站时，这段HTML代码会自动执行，从而达到攻击的目的。如，盗取用户Cookie、破坏页面结构、重定向到其它网站等。")]),t._v(" "),r("h3",{attrs:{id:"跨域"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#跨域"}},[t._v("#")]),t._v(" 跨域")]),t._v(" "),r("h4",{attrs:{id:"什么是跨域"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是跨域"}},[t._v("#")]),t._v(" 什么是跨域")]),t._v(" "),r("p",[t._v("浏览器从一个域向另一个域的服务器发送请求来访问其资源。\n浏览器的同源策略：协议、域名、端口号一致。")]),t._v(" "),r("h4",{attrs:{id:"解决跨域"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解决跨域"}},[t._v("#")]),t._v(" 解决跨域")]),t._v(" "),r("ol",[r("li",[r("p",[t._v('CORS"跨域资源共享"（Cross-origin resource sharing）\n请求的request header中的origin字段和服务器返回的Access-Control-Allow-Origin中的源一致\n'),r("strong",[t._v("使用withCredentials")])]),t._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" xhr "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XMLHttpRequest")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nxhr"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'GET'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://www.abc/api'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nxhr"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("withCredentials "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//带上了cookie")]),t._v("\nxhr"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("onload "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" onLoadHandler"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nxhr"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//设置服务端响应头")]),t._v("\nAccess"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Allow"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Credentials"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])])]),t._v(" "),r("li",[r("p",[t._v("反向代理\n利用代理服务器接收到请求之后转发给真正的服务器\n在vue.config.js中加入proxy写入代理服务器")])]),t._v(" "),r("li",[r("p",[t._v("JSONP（只能实现get）")]),t._v(" "),r("p",[t._v("实现跨域请求的原理简单的说，就是动态创建"),r("code",[t._v("script")]),t._v("标签，然后利用"),r("code",[t._v("script")]),t._v("的src 不受同源策略约束来跨域获取数据。")]),t._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("handle")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("response")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("response"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script src"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"www.xx.cn?callback=handle"')]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])])])]),t._v(" "),r("h3",{attrs:{id:"http状态码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#http状态码"}},[t._v("#")]),t._v(" HTTP状态码")]),t._v(" "),r("ul",[r("li",[t._v("1xx：信息，服务器收到请求，需要请求者继续执行操作")]),t._v(" "),r("li",[t._v("2xx：成功，操作被成功接收并处理")]),t._v(" "),r("li",[t._v("3xx：重定向，需要进一步的操作以完成请求")]),t._v(" "),r("li",[t._v("4xx：客户端错误")]),t._v(" "),r("li",[t._v("5xx：服务器错误")])]),t._v(" "),r("p",[r("strong",[t._v("常见状态码")])]),t._v(" "),r("p",[t._v("200：请求成功")]),t._v(" "),r("p",[t._v("304：Not Modified 对客户端有缓存情况下服务端的一种响应。客户端在请求时发现自己的缓存文件有修改，那么请求时就会包含If Modified Since，即修改时间，服务器发现该信息说明客户端有缓存，只需判断这个时间和当前请求文件的修改时间就可以确定是返回 304（未修改，客户端直接读取缓存） 还是 200\n在进行条件请求时，一般请求头会带上  If-Modified-Since、 If-None-Match，这两个值分别对应响应头 Last-Modified、 ETag 返回的值")]),t._v(" "),r("p",[t._v("400：客户端请求的语法错误，服务器无法理解")]),t._v(" "),r("p",[t._v("401：请求要求身份验证。对于需要登录的网页，服务器可能返回此响应")]),t._v(" "),r("p",[t._v("404：服务器无法根据客户端的请求找到资源")]),t._v(" "),r("p",[t._v("500：服务器内部错误")]),t._v(" "),r("p",[t._v("502：从远程服务器接收到了一个无效的响应")]),t._v(" "),r("h3",{attrs:{id:"https与http区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#https与http区别"}},[t._v("#")]),t._v(" https与http区别")]),t._v(" "),r("p",[t._v("URL开头不同，HTTPS端口"),r("strong",[t._v("443")]),t._v("、HTTP端口"),r("strong",[t._v("80")]),t._v("，HTTPS需要认证证书SSL")]),t._v(" "),r("h3",{attrs:{id:"https工作原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#https工作原理"}},[t._v("#")]),t._v(" HTTPS工作原理")]),t._v(" "),r("p",[t._v("对称加密+非对称加密")]),t._v(" "),r("p",[t._v("非对称性加密之所以不安全，是应为客户端不知道，这把公钥是不是服务器的。因此，我们需要找到一种策略来证明这把公钥就是服务器的，而不是别人冒充的。解决这个问题的方式就是使用"),r("strong",[t._v("数字证书")])]),t._v(" "),r("ol",[r("li",[t._v("首先服务端给客户端传输证书,这个证书就是公钥,只是包含了很多的信息,比如说证书的办法机构,证书的过期时间")]),t._v(" "),r("li",[t._v("客户端进行证书的解析,比如说验证办法机构,过期时间,如果发现没有任何问题,就生成一个随机值(私钥),然后用证书对这个私钥进行加密,并发送给服务端")]),t._v(" "),r("li",[t._v("服务端使用私钥将这个信息进行解密,得到客户端的私钥,然后客户端和服务端就可以通过这个私钥进行通信了")]),t._v(" "),r("li",[t._v("服务端将消息进行对称加密(简单来说就是讲消息和私钥进行混合,除非知道私钥否则服务进行解密),私钥正好只有客户端和服务端知道,所以信息就比较安全了")]),t._v(" "),r("li",[t._v("服务端将进行对称加密后的消息进行传送")]),t._v(" "),r("li",[t._v("客户端使用私钥进行信息的解密")])]),t._v(" "),r("h3",{attrs:{id:"http缓存及其原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#http缓存及其原理"}},[t._v("#")]),t._v(" http缓存及其原理")]),t._v(" "),r("p",[r("strong",[t._v("强缓存")]),t._v("基本原理是：所请求的数据在缓存数据库中尚未过期时，不与服务器进行交互，直接使用缓存数据库中的数据。\n"),r("strong",[t._v("协商缓存")]),t._v("主要原理是从缓存数据库中取出缓存的标识，然后向浏览器发送请求验证请求的数据是否已经更新，如果已更新则返回新的数据。")]),t._v(" "),r("h3",{attrs:{id:"请求头有哪些"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#请求头有哪些"}},[t._v("#")]),t._v(" 请求头有哪些")]),t._v(" "),r("ul",[r("li",[t._v("accept 请求报头域，指定客户端可以接收的类型有哪些")]),t._v(" "),r("li",[t._v("accept-encoding：指定客户端可接收的内容编码")]),t._v(" "),r("li",[t._v("accept-language：指定客户端可接收的编码语言")]),t._v(" "),r("li",[t._v("host：用户指定请求资源的主机和端口号")]),t._v(" "),r("li",[t._v("cookies：用于存储本地的数据")]),t._v(" "),r("li",[t._v("refer：用于标识这个请求是从哪个页面来的")]),t._v(" "),r("li",[t._v("user-agent:识别用户的使用的客户端版本")]),t._v(" "),r("li",[t._v("content-type：用于标识具体请求的媒体类型")])]),t._v(" "),r("h3",{attrs:{id:"http请求的类型有哪些"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#http请求的类型有哪些"}},[t._v("#")]),t._v(" HTTP请求的类型有哪些？")]),t._v(" "),r("p",[t._v("8种")]),t._v(" "),r("p",[r("strong",[t._v("GET、POST")]),t._v(" "),r("strong",[t._v("HEAD")]),t._v("(只返回响应头)\n"),r("strong",[t._v("PUT")]),t._v(" "),r("strong",[t._v("DELETE")]),t._v("(请求服务器删除Request-URI所标识的资源)\n"),r("strong",[t._v("OPTIONS")]),t._v("(测试服务器功能性)\n"),r("strong",[t._v("TRACE")]),t._v("(回显服务器收到的请求，主要用于测试或诊断)\n"),r("strong",[t._v("CONNECT")]),t._v("(让服务器代替用户访问其他网页)")]),t._v(" "),r("h3",{attrs:{id:"http报文组成部分"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#http报文组成部分"}},[t._v("#")]),t._v(" HTTP报文组成部分")]),t._v(" "),r("p",[r("img",{attrs:{src:a(359),alt:"2"}})]),t._v(" "),r("h3",{attrs:{id:"http2-o和1-x的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#http2-o和1-x的区别"}},[t._v("#")]),t._v(" HTTP2.O和1.x的区别")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("HTTP2使用的是二进制传送，HTTP1.X是文本（字符串）传送。\n二进制传送的单位是帧和流。帧组成了流，同时流还有流ID标示")])]),t._v(" "),r("li",[r("p",[t._v("HTTP2支持多路复用\n因为有流ID，所以通过同一个http请求实现多个http请求传输变成了可能，可以通过流ID来标示究竟是哪个流从而定位到是哪个http请求")])]),t._v(" "),r("li",[r("p",[t._v("HTTP2头部压缩\nHTTP2通过gzip和compress压缩头部然后再发送，同时客户端和服务器端同时维护一张头信息表，所有字段都记录在这张表中，这样后面每次传输只需要传输表里面的索引Id就行，通过索引ID查询表头的值")])]),t._v(" "),r("li",[r("p",[t._v("HTTP2支持服务器推送\nHTTP2支持在未经客户端许可的情况下，主动向客户端推送内容")])])]),t._v(" "),r("h3",{attrs:{id:"etag"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#etag"}},[t._v("#")]),t._v(" ETAG")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://www.cnblogs.com/happy4java/p/11206015.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("资料"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("在HTTP1.1规范中，新增了一个HTTP头信息：ETag")]),t._v(" "),r("p",[t._v("Etag是 Entity tag的缩写，可以理解为“被请求变量的实体值”")]),t._v(" "),r("p",[t._v("客户端在向服务端请求资源的时候，通过If-None-Match请求头带上了之前服务端返回的Etag的值。服务端收到第二次请求的时候，发现携带了If-None-Match字段，就重新计算服务器对应资源的Etag，如果二者匹配了，就认为资源没有发生变化，直接给客户端相应304，让客户端读取缓存中的数据。")]),t._v(" "),r("h3",{attrs:{id:"tcp滑动窗口和拥塞控制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tcp滑动窗口和拥塞控制"}},[t._v("#")]),t._v(" TCP滑动窗口和拥塞控制")])])}),[],!1,null,null,null);s.default=v.exports}}]);