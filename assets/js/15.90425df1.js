(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{378:function(t,s,a){"use strict";a.r(s);var n=a(25),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目"}},[t._v("#")]),t._v(" 项目")]),t._v(" "),a("h3",{attrs:{id:"前端项目构建的流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端项目构建的流程"}},[t._v("#")]),t._v(" 前端项目构建的流程")]),t._v(" "),a("ol",[a("li",[t._v("技术选型")]),t._v(" "),a("li",[t._v("搭建项目")]),t._v(" "),a("li",[t._v("根据业务需求进行代码开发")]),t._v(" "),a("li",[t._v("打包")]),t._v(" "),a("li",[t._v("部署")])]),t._v(" "),a("h3",{attrs:{id:"es6和nodejs模块化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6和nodejs模块化"}},[t._v("#")]),t._v(" ES6和nodejs模块化")]),t._v(" "),a("p",[a("strong",[t._v("nodejs")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 引入node核心模块时 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 引入自定义的模块时")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("  名称 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'路径'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//向外暴露：")]),t._v("\nmodule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v("ES6")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" 模块名称 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'模块标识符'")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// eg:引入该模块下的定义的数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("STATISTICSTYPE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@/utility/dict"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'路径'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//向外暴露")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v("\n")])])]),a("h3",{attrs:{id:"webpack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[t._v("#")]),t._v(" Webpack")]),t._v(" "),a("h4",{attrs:{id:"打包过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#打包过程"}},[t._v("#")]),t._v(" 打包过程")]),t._v(" "),a("ol",[a("li",[t._v("初始化参数，从配置文件和shell语句中读到的参数合并，得到最后的参数")]),t._v(" "),a("li",[t._v("开始编译：用合并得到的参数初始化complier对象，加载是所有配置的插件，执行run方法开始编译")]),t._v(" "),a("li",[t._v("确定入口，通过entry找到入口文件")]),t._v(" "),a("li",[t._v("编译模块，从入口文件出发，调用所有配置的loader对模块进行解析翻译，在找到该模块依赖的模块进行处理")]),t._v(" "),a("li",[t._v("完成模块编译，得到每个模块被翻译之后的最终的内容和依赖关系")]),t._v(" "),a("li",[t._v("输出资源，根据入口和模块之间的依赖关系，组装成一个个包含多个模块的chunk，在把每个chunk转换成一个单独的文件加载到输出列表")]),t._v(" "),a("li",[t._v("输出完成，确定输出的路径和文件名，把内容写到文件系统中")])]),t._v(" "),a("h4",{attrs:{id:"loader和plugin的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#loader和plugin的区别"}},[t._v("#")]),t._v(" loader和plugin的区别")]),t._v(" "),a("p",[a("strong",[t._v("loader")]),t._v("是用来告诉webpack如何转化处理某一类型的文件，并且引入到打包出的文件中\n"),a("strong",[t._v("plugin")]),t._v("是用来自定义webpack打包过程中的方式，一个插件是含有apply方法的一个对象，通过这个方法可以参与到整个webpack打包的各个流程（生命周期）\n"),a("strong",[t._v("不同的作用")]),t._v('\nLoader直译为"加载器"。Webpack将一切文件视为模块，但是webpack原生是只能解析js文件，如果想将其他文件也打包的话，就会用到loader。 所以Loader的作用是让webpack拥有了加载和解析非JavaScript文件的能力。\nPlugin直译为"插件"。Plugin可以扩展webpack的功能，让webpack具有更多的灵活性。 在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。')]),t._v(" "),a("p",[a("strong",[t._v("不同的用法")]),t._v("\nLoader在module.rules中配置，也就是说他作为模块的解析规则而存在。 类型为数组，每一项都是一个Object，里面描述了对于什么类型的文件（test），使用什么加载(loader)和使用的参数（options）\nPlugin在plugins中单独配置。 类型为数组，每一项是一个plugin的实例，参数都通过构造函数传入。")]),t._v(" "),a("h4",{attrs:{id:"什么是bundle-什么是chunk-什么是module"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是bundle-什么是chunk-什么是module"}},[t._v("#")]),t._v(" 什么是bundle，什么是chunk，什么是module")]),t._v(" "),a("p",[t._v("bundle是由webpack打包出来的文件，chunk是指webpack在进行模块依赖分析的时候，代码分割出来的代码块，module是开发中的单个模块")]),t._v(" "),a("h4",{attrs:{id:"提高webpack的构建速度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提高webpack的构建速度"}},[t._v("#")]),t._v(" 提高webpack的构建速度")]),t._v(" "),a("ol",[a("li",[t._v("多入口情况下，使用CommonsChunkPlugin来提取公共代码")]),t._v(" "),a("li",[t._v("通过externals配置来提取常用库")]),t._v(" "),a("li",[t._v("利用DllPlugin和DllReferencePlugin预编译资源模块 通过DllPlugin来对那些我们引用但是绝对不会修改的npm包来进行预编译，再通过DllReferencePlugin将预编译的模块加载进来。")]),t._v(" "),a("li",[t._v("使用Happypack 实现多线程加速编译")]),t._v(" "),a("li",[t._v("使用webpack-uglify-parallel来提升uglifyPlugin的压缩速度。 原理上webpack-uglify-parallel采用了多核并行压缩来提升压缩速度")]),t._v(" "),a("li",[t._v("使用Tree-shaking和Scope Hoisting来剔除多余代码")])]),t._v(" "),a("h4",{attrs:{id:"热更新原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#热更新原理"}},[t._v("#")]),t._v(" 热更新原理")]),t._v(" "),a("p",[t._v("监听、编译已改动的文件、soketio发送hash给dev-server、检查是否更新、通过jsonp请求已改动的代码、更新改动模块")]),t._v(" "),a("h3",{attrs:{id:"seo优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#seo优化"}},[t._v("#")]),t._v(" SEO优化")]),t._v(" "),a("p",[t._v("Search Engine Optimization，搜索引擎优化。\n存在的意义：为了提升网页在搜索引擎自然搜索结果中的收录数量以及排序位置而做的优化行为。简言之，就是希望百度等搜索引擎能多多我们收录精心制作后的网站，并且在别人访问时网站能排在前面。")]),t._v(" "),a("ol",[a("li",[t._v("控制首页链接数量")]),t._v(" "),a("li",[t._v("扁平化的目录层次，尽量让“蜘蛛”只要跳转3次，就能到达网站内的任何一个内页")]),t._v(" "),a("li",[t._v("导航优化，尽量采用文字导航，"),a("img"),t._v("标签必须添加“alt”和“title”属性")]),t._v(" "),a("li",[t._v("慎用"),a("code",[t._v("display: none;")])])]),t._v(" "),a("h3",{attrs:{id:"性能优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能优化"}},[t._v("#")]),t._v(" 性能优化")]),t._v(" "),a("ul",[a("li",[t._v("用户体验优化\n"),a("ul",[a("li",[t._v("增加过渡动画")]),t._v(" "),a("li",[t._v("使用雪碧图")]),t._v(" "),a("li",[t._v("合适的错误处理")])])]),t._v(" "),a("li",[t._v("DOM深度尽量浅")]),t._v(" "),a("li",[t._v("用三目运算符代替简单的if-else")]),t._v(" "),a("li",[t._v("减少无意义的对象嵌套")]),t._v(" "),a("li",[t._v("使用ES6简化代码\n"),a("ul",[a("li",[t._v("使用箭头函数取代小函数")]),t._v(" "),a("li",[t._v("使用ES6的class"),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addAge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])])]),t._v(" "),a("li",[t._v("使用DNS缓存\n"),a("ul",[a("li",[t._v("可以加快DNS解析速度")])])]),t._v(" "),a("li",[t._v("使用DNS负载均衡\n"),a("ul",[a("li",[t._v("为同一个主机名配置多个IP地址，在应答DNS查询时，DNS服务器对每个查询将以DNS文件中主机记录的IP地址按顺序返回不同的解析结果，将客户端的访问引导到不同的机器上去，使得不同的客户端访问不同的服务器，从而达到负载均衡的目的。")])])]),t._v(" "),a("li",[t._v("优化缓存性能\n"),a("ul",[a("li",[t._v("强缓存和协商缓存的概念\n1）浏览器在加载资源时，先根据这个资源的一些 http header 判断它是否命中强缓存，强缓存如果命中，浏览器直接从自己的缓存中读取资源，不会发请求到服务器。\n2）当强缓存没有命中的时候，浏览器一定会发送一个请求到服务器，通过服务器端依据资源的另外一些 http header 验证这个资源是否命中协商缓存，如果协商缓存命中，服务器会将这个请求返回，但是不会返回这个资源的数据，而是告诉客户端可以直接从缓存中加载这个资源，于是浏览器就又会从自己的缓存中去加载这个资源；\n3）共同点是：如果命中，都是从客户端缓存中加载资源，而不是从服务器加载资源数据；\n4）区别是：强缓存不发请求到服务器，协商缓存会发请求到服务器。\n5）当协商缓存也没有命中的时候，浏览器直接从服务器加载资源数据。")])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);